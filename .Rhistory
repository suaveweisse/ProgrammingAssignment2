makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector
makeVector
makeVector(c(1,2,3,4,5,6,7,8,9,10))
ls
vect <- makeVector(c(1,2,3,4,5,6,7,8,9,10))
vect
x$getmean()
vect$getmean()
m
m()
vect$m
x <- c(1,2,3,4,5,6,7,8,9,10)
x
vect <- makeVector(x)
getmean()
x$getmean()
getmean(x)
x
vect <- x
vect
vectSpec <- makeVector(vect)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vectSpec
cachemean(vectSpec)
cachemean(vectSpec)
cachemean(vectSpec)
x
getTest <- function() x
getTest
getTest()
?mean
?function
?function()
?list
x$get()
test<- x$get()
?rm
rm(list = ls())
dataVector <- c(1:9)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
resultVector <- makeVector(dataVector)
cachemean(resultVector)
cachemean(resultVector)
cachemean(resultVector)
testDataMatrix <- matrix(1:4,nrow=2,ncol=2)
testDataMatrix
testResultMatrix <- makeCacheMatrix(testDataMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
testResultMatrix <- makeCacheMatrix(testDataMatrix)
cacheSolve(testResultMatrix)
testDataMatrix<- matrix(c(3,-7,5,2),nrow=2,ncol=2)
testDataMatrix
testResultMatrix <- makeCacheMatrix(testDataMatrix)
cacheSolve(testResultMatrix)
rm(list=ls())
## The following functions calculate, and then cache, the inverse of a matrix
## makeCacheMatrix: creates a list object with a function to...
##    1) set the matrix values
##    2) get the matrix values
##    3) set the inverted matrix values
##    4) get the inverted matrix values
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve: calculates and returns the inverse of the matrix created in the
## makeCacheMatrix function, if the inverse hasn't already been
## calculated and cached. if the inverse is cached, the cached inverted
## matrix is returned.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
testDataMatrix<- matrix(c(3,-7,5,2),nrow=2,ncol=2)
testResultMatrix <- makeCacheMatrix(testDataMatrix)
cacheSolve(testResultMatrix)
cacheSolve(testResultMatrix)
